---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines for integrating new features into the Task Master CLI
globs: scripts/modules/*.js
alwaysApply: false
---

# Task Master Feature Integration Guidelines

## Feature Placement Decision Process

- **Identify Feature Type** (See ](mdc:.cursor/rules/architecture.mdc) for module details):
  - **Data Manipulation**: Features that create, reate tasks belong in [`tas`](mdc:scripts/modules/task-manager.js). Follow guidelines in [`tasks.mdc`](mdc:.cu  - **Dependency Manageat handle task relationships belong in [`dependency-manager.js`](mdc:scripts/modendency-manager.js). Foelines in [`dependencies.mdc`](mdc:.cursor/rules/dependencies.mdcterface**: Features that display information to users belong in [`ui.js`](mdc:scripts/modules/ui.js). Follow guidelines in [`ui.mdc`](mdc:.cmdc).
  - **AI Integration**: Features that use AI mode`ai-services.js`](mdc:scripts/modules/ai-services.js).
  - **Cross-Cutting**: Features that don't fit one category may need components in multiple modules

- **Command-Line Interface** (See [`commands.mdc`](mdc:.cursor/rules/commands.mdc)):
  - All new user-facing commands should be added to [`commpts/modules/commands.js)
  - Use consistent patterns fn naming anxt
  - Follow the Commander.js model for subcommand s Implementa
The standard pattern for adding a feature follows this workflow:

1. **CoImplement the business logic in the appropriate modultask-manager.js`](mdc:task-manager.js)).
2. **UI Components**: Add any display funct(mdc:scripts/modules/ui.js) following [`ui.mdc`](mdc:.cursor/rules/ui.mdc).
3. **Command Integration**: Add the CLI command to [`commands.js`](mdc:scripts/modules/commands.js) following [`commands.mdc`](mdc:.cursor/rules/commands.mdc).
4. **Testing**: Write tests for all components of the feature (following [`tests.mdc`](mdc:.cursor/rules/tests.mdc))
5. **Configuration**: Update any configuration in [`utils.js`](mdc:scripts/modules/utils.js) if needed, following [`utilities.mdc`](mdc:.cursor/rules/utilities.mdc).
6. **Documentation**: Update help text and documentation in [dev_workflow.mdc](mdc:scripts/modules/dev_workflow.mdc)

## New Command Implementation

- Follow the conventions in existing files to maintain consistency
- New commands should be added to [`commands.js`](mdc:scripts/modules/commands.js) in the `registerCommands` function
- Use Commander.js for command definition and option parsing

```javascript
programInstance
  .command('new-command')
  .description('Description of the new command')
  .option('-o, --option <value>', 'Description of the option')
  .action(async (options) => {
    // Implement command action
  });
```

- For interactive commands, use inquirer following the standardized patterns:

```javascript
// Interactive prompt with inquirer
try {
  const { userInput } = await inquirer.prompt([
    {
      type: 'input', // or 'confirm', 'list', etc.
      name: 'userInput',
      message: 'Enter information:',
      validate: (input) => input.trim() !== '' || 'Input cannot be empty'
    }
  ]);
  
  // Process user input
} catch (error) {
  console.error(chalk.red('Interactive input failed:'), error.message);
}
```

- All command handlers should use `try/catch` for error handling

```javascript
.action(async (options) => {
  try {
    // Command implementation
  } catch (error) {
    console.error(chalk.red(`Error: ${error.message}`));
    if (CONFIG.debug) {
      console.error(error);
    }
    process.exit(1);
  }
});
```

## Cross-Module Features

For features requiring components in multiple modules:

- ✅ **DO**: Create a clear unidirectional flow of dependencies
  ```javascript
  // In task-manager.js
  function analyzeTasksDifficulty(tasks) {
    // Implementation...
    return difficultyScores;
  }
  
  // In ui.js - depends on task-manager.js
  import { analyzeTasksDifficulty } from './task-manager.js';
  
  function displayDifficultyReport(tasks) {
    const scores = analyzeTasksDifficulty(tasks);
    // Render the scores...
  }
  ```

- ❌ **DON'T**: Create circular dependencies between modules
  ```javascript
  // In task-manager.js - depends on ui.js
  import { displayDifficultyReport } from './ui.js';
  
  function analyzeTasks() {
    // Implementation...
    displayDifficultyReport(tasks); // WRONG! Don't call UI functions from task-manager
  }
  
  // In ui.js - depends on task-manager.js
  import { analyzeTasks } from './task-manager.js';
  ```

## Command-Line Interface Standards

- **Naming Conventions**:
  - Use kebab-case for command names (`analyze-complexity`, not `analyzeComplexity`)
  - Use kebab-case for option names (`--output-format`, not `--outputFormat`) 
  - Use the same option names across commands when they represent the same concept

- **Command Structure**:
  ```javascript
  programInstance
    .command('command-name')
    .description('Clear, concise description of what the command does')
    .option('-s, --short-option <value>', 'Option description', 'default value')
    .option('--long-option <value>', 'Option description')
    .action(async (options) => {ommand implementation
    });
  ```

## Utility Function Guidelines

When