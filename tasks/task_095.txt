# Task ID: 95
# Title: Implement .taskmaster Directory Structure
# Status: pending
# Dependencies: 1, 3, 4, 17
# Priority: high
# Description: Consolidate all Task Master files into a clean, centralized .taskmaster/ directory structure to improve organization and maintainability based on GitHub issue #275, with consideration for future monorepo support.
# Details:
This task involves restructuring the Task Master file organization to improve maintainability and follow best practices for CLI tools, while considering future monorepo support:

1. Create a new `.taskmaster/` directory in the project root:
   - Move the `tasks/` directory to `.taskmaster/tasks/`
   - Move the `scripts/` directory to `.taskmaster/scripts/`
   - Move the `.taskmasterconfig` file to `.taskmaster/config.json`

2. Update all file path references throughout the codebase:
   - Modify the task file generation system to use the new paths
   - Update all import/require statements referencing the moved files
   - Adjust configuration loading to look for config in the new location
   - Update any CLI commands that reference these paths
   - Modify any path resolution logic in the codebase

3. Ensure backward compatibility during migration:
   - Implement path fallback logic that checks both old and new locations
   - Add deprecation warnings when old paths are used
   - Create a migration script to help users transition to the new structure
   - Update documentation to reflect the new directory structure

4. Update the project initialization process:
   - Modify the init command to create the new directory structure
   - Update templates and default configurations

5. Design with monorepo considerations:
   - Architect the path resolution system to be flexible for future monorepo support
   - Consider how multiple projects might share or isolate .taskmaster directories
   - Plan for potential hierarchical configuration inheritance
   - Document architectural decisions for future monorepo implementation

6. Test thoroughly to ensure all functionality works with the new structure:
   - Verify all commands work with the new paths
   - Ensure backward compatibility functions correctly
   - Test on different operating systems to verify path handling

7. Update documentation:
   - Update README.md and other documentation to reflect the new structure
   - Add migration guide for existing users
   - Document the rationale for the change and future monorepo considerations

# Test Strategy:
1. Unit Testing:
   - Create unit tests for path resolution that verify both new and old paths work
   - Test the config loading with both new and old config locations
   - Verify the migration script correctly moves files and updates references
   - Test path resolution flexibility for future monorepo scenarios

2. Integration Testing:
   - Run all existing integration tests with the new directory structure
   - Verify that all commands function correctly with the new paths
   - Test backward compatibility by running commands with old file structure

3. Migration Testing:
   - Test the migration process on a sample project with existing tasks
   - Verify all tasks, scripts, and configurations are correctly moved and updated
   - Ensure no data loss occurs during migration

4. Cross-platform Testing:
   - Test on Windows, macOS, and Linux to ensure path handling works correctly
   - Verify path separators are handled properly across platforms

5. Manual Testing:
   - Perform a complete workflow test with the new structure
   - Create, update, and delete tasks using the new structure
   - Run all commands to ensure they work with the new paths

6. Documentation Verification:
   - Review all documentation to ensure it accurately reflects the new structure
   - Verify the migration guide provides clear instructions for users

7. Regression Testing:
   - Run the full test suite to ensure no regressions were introduced

8. Architecture Validation:
   - Review the path resolution architecture for extensibility
   - Validate that the design can accommodate future monorepo requirements

# Subtasks:
## 1. Create .taskmaster directory structure [pending]
### Dependencies: None
### Description: Create the new .taskmaster directory and move existing files to their new locations
### Details:
Create a new .taskmaster/ directory in the project root. Move the tasks/ directory to .taskmaster/tasks/. Move the scripts/ directory to .taskmaster/scripts/. Move the .taskmasterconfig file to .taskmaster/config.json. Ensure proper file permissions are maintained during the move.

## 2. Update file path references in core modules [pending]
### Dependencies: 95.1
### Description: Modify all import/require statements and file path references in the core codebase
### Details:
Identify all files that reference the moved directories and files. Update import/require statements to use the new paths. Modify any hardcoded path references. Update configuration loading logic to look for config.json in the new location.

## 3. Update task file generation system [pending]
### Dependencies: 95.1
### Description: Modify the task file generation system to use the new directory structure
### Details:
Update the task file generation system to create and read task files from .taskmaster/tasks/ instead of tasks/. Ensure all template paths are updated. Modify any path resolution logic specific to task file handling.

## 4. Implement backward compatibility logic [pending]
### Dependencies: 95.2, 95.3
### Description: Add fallback mechanisms to support both old and new file locations during transition
### Details:
Implement path fallback logic that checks both old and new locations when files aren't found. Add deprecation warnings when old paths are used, informing users about the new structure. Ensure error messages are clear about the transition.

## 5. Create migration script for users [pending]
### Dependencies: 95.1, 95.4
### Description: Develop a script to help users transition their existing projects to the new structure
### Details:
Create a migration script that automatically moves files from old locations to the new .taskmaster structure. Include backup functionality to prevent data loss. Add validation to ensure the migration completed successfully. Make the script available through the CLI.

## 6. Update project initialization process [pending]
### Dependencies: 95.1
### Description: Modify the init command to create the new directory structure for new projects
### Details:
Update the init command to create the .taskmaster directory and its subdirectories. Modify templates and default configurations to use the new paths. Ensure new projects are created with the correct structure from the start.

## 7. Update CLI commands and path handling [pending]
### Dependencies: 95.2, 95.3, 95.6
### Description: Modify CLI commands to work with the new directory structure across different operating systems
### Details:
Update all CLI commands that reference the moved files and directories. Ensure path handling is consistent across different operating systems. Test path resolution on Windows, macOS, and Linux to verify compatibility.

## 8. Update documentation and create migration guide [pending]
### Dependencies: 95.1, 95.5, 95.6, 95.7
### Description: Update all documentation to reflect the new directory structure and provide migration guidance
### Details:
Update README.md and other documentation to reflect the new .taskmaster structure. Create a comprehensive migration guide for existing users explaining the changes and migration process. Document the rationale for the change and the benefits of the new structure. Include examples of the new directory layout and updated command usage.

## 9. Design path resolution architecture for monorepo support [pending]
### Dependencies: 95.2, 95.3
### Description: Architect the path resolution system to be extensible for future monorepo scenarios
### Details:
Design a flexible path resolution system that can accommodate future monorepo support. Consider how multiple projects might share or isolate .taskmaster directories. Plan for potential hierarchical configuration inheritance where monorepo-level configs could override project-level ones. Create architectural documentation outlining the design decisions and future implementation strategy for monorepos. Ensure the current single-project implementation doesn't preclude future monorepo functionality.

## 10. Document monorepo considerations and future roadmap [pending]
### Dependencies: 95.9, 95.8
### Description: Create documentation outlining monorepo support plans and architectural considerations
### Details:
Document the architectural decisions made for future monorepo support. Create a roadmap section in the documentation explaining how monorepo support might be implemented in future iterations. Include examples of potential monorepo directory structures and configuration inheritance patterns. Document any limitations of the current single-project implementation that users should be aware of when considering monorepo usage.

