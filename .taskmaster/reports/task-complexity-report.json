{
	"meta": {
		"generatedAt": "2025-06-17T20:24:45.318Z",
		"tasksAnalyzed": 35,
		"totalTasks": 93,
		"analysisCount": 53,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": false
	},
	"complexityAnalysis": [
		{
			"taskId": 63,
			"taskTitle": "Add pnpm Support for the Taskmaster Package",
			"complexityScore": 5,
			"recommendedSubtasks": 8,
			"expansionPrompt": "The current 8 subtasks for adding pnpm support appear comprehensive. Consider if any additional subtasks are needed for CI/CD integration, performance comparison, or documentation updates.",
			"reasoning": "This task involves ensuring the package works correctly with pnpm as an alternative package manager. The complexity is moderate as it requires careful testing of installation processes and scripts across different environments. The 8 existing subtasks cover all major aspects from documentation to binary verification."
		},
		{
			"taskId": 64,
			"taskTitle": "Add Yarn Support for Taskmaster Installation",
			"complexityScore": 5,
			"recommendedSubtasks": 9,
			"expansionPrompt": "The current 9 subtasks for adding Yarn support appear comprehensive. Consider if any additional subtasks are needed for performance testing, CI/CD integration, or compatibility with different Yarn versions.",
			"reasoning": "This task involves ensuring the package works correctly with Yarn as an alternative package manager. The complexity is moderate as it requires careful testing of installation processes and scripts across different environments. The 9 existing subtasks are very detailed and cover all aspects from configuration to testing."
		},
		{
			"taskId": 65,
			"taskTitle": "Add Bun Support for Taskmaster Installation",
			"complexityScore": 6,
			"recommendedSubtasks": 6,
			"expansionPrompt": "The current 6 subtasks for adding Bun support appear well-structured. Consider if any additional subtasks are needed for handling Bun-specific issues, performance testing, or documentation updates.",
			"reasoning": "This task involves adding support for the newer Bun package manager. The complexity is slightly higher than the other package manager tasks due to Bun's differences from Node.js and potential compatibility issues. The 6 existing subtasks cover the main implementation areas from research to documentation."
		},
		{
			"taskId": 68,
			"taskTitle": "Ability to create tasks without parsing PRD",
			"complexityScore": 3,
			"recommendedSubtasks": 2,
			"expansionPrompt": "The current 2 subtasks for implementing task creation without PRD appear appropriate. Consider if any additional subtasks are needed for validation, error handling, or integration with existing task management workflows.",
			"reasoning": "This task involves a relatively simple modification to allow task creation without requiring a PRD document. The complexity is low as it primarily involves creating a form interface and saving functionality. The 2 existing subtasks cover the main implementation areas of UI design and data saving."
		},
		{
			"taskId": 77,
			"taskTitle": "Implement AI Usage Telemetry for Taskmaster (with external analytics endpoint)",
			"complexityScore": 7,
			"recommendedSubtasks": 18,
			"expansionPrompt": "The current 18 subtasks for implementing AI usage telemetry appear very comprehensive. Consider if any additional subtasks are needed for security hardening, privacy compliance, or user feedback collection.",
			"reasoning": "This task involves creating a telemetry system to track AI usage metrics. The complexity is high due to the need for secure data transmission, comprehensive data collection, and integration across multiple commands. The 18 existing subtasks are extremely detailed and cover all aspects of implementation from core utility to provider-specific updates."
		},
		{
			"taskId": 80,
			"taskTitle": "Implement Unique User ID Generation and Storage During Installation",
			"complexityScore": 4,
			"recommendedSubtasks": 5,
			"expansionPrompt": "The current 5 subtasks for implementing unique user ID generation appear well-structured. Consider if any additional subtasks are needed for privacy compliance, security auditing, or integration with the telemetry system.",
			"reasoning": "This task involves generating and storing a unique user identifier during installation. The complexity is relatively low as it primarily involves UUID generation and configuration file management. The 5 existing subtasks cover the main implementation areas from script structure to documentation."
		},
		{
			"taskId": 81,
			"taskTitle": "Task #81: Implement Comprehensive Local Telemetry System with Future Server Integration Capability",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "The current 6 subtasks for implementing the comprehensive local telemetry system appear well-structured. Consider if any additional subtasks are needed for data migration, storage optimization, or visualization tools.",
			"reasoning": "This task involves expanding the telemetry system to capture additional metrics and implement local storage with future server integration capability. The complexity is high due to the breadth of data collection, storage requirements, and privacy considerations. The 6 existing subtasks cover the main implementation areas from data collection to user-facing benefits."
		},
		{
			"taskId": 82,
			"taskTitle": "Update supported-models.json with token limit fields",
			"complexityScore": 3,
			"recommendedSubtasks": 1,
			"expansionPrompt": "This task appears straightforward enough to be implemented without further subtasks. Focus on researching accurate token limit values for each model and ensuring backward compatibility.",
			"reasoning": "This task involves a simple update to the supported-models.json file to include new token limit fields. The complexity is low as it primarily involves research and data entry. No subtasks are necessary as the task is well-defined and focused."
		},
		{
			"taskId": 83,
			"taskTitle": "Update config-manager.js defaults and getters",
			"complexityScore": 4,
			"recommendedSubtasks": 1,
			"expansionPrompt": "This task appears straightforward enough to be implemented without further subtasks. Focus on updating the DEFAULTS object and related getter functions while maintaining backward compatibility.",
			"reasoning": "This task involves updating the config-manager.js module to replace maxTokens with more specific token limit fields. The complexity is relatively low as it primarily involves modifying existing code rather than creating new functionality. No subtasks are necessary as the task is well-defined and focused."
		},
		{
			"taskId": 84,
			"taskTitle": "Implement token counting utility",
			"complexityScore": 5,
			"recommendedSubtasks": 1,
			"expansionPrompt": "This task appears well-defined enough to be implemented without further subtasks. Focus on implementing accurate token counting for different models and proper fallback mechanisms.",
			"reasoning": "This task involves creating a utility function to count tokens for different AI models. The complexity is moderate as it requires integration with the tiktoken library and handling different tokenization schemes. No subtasks are necessary as the task is well-defined and focused."
		},
		{
			"taskId": 69,
			"taskTitle": "Enhance Analyze Complexity for Specific Task IDs",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Break down the task 'Enhance Analyze Complexity for Specific Task IDs' into 6 subtasks focusing on: 1) Core logic modification to accept ID parameters, 2) Report merging functionality, 3) CLI interface updates, 4) MCP tool integration, 5) Documentation updates, and 6) Comprehensive testing across all components.",
			"reasoning": "This task involves modifying existing functionality across multiple components (core logic, CLI, MCP) with complex logic for filtering tasks and merging reports. The implementation requires careful handling of different parameter combinations and edge cases. The task has interdependent components that need to work together seamlessly, and the report merging functionality adds significant complexity."
		},
		{
			"taskId": 85,
			"taskTitle": "Update ai-services-unified.js for dynamic token limits",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Break down the update of ai-services-unified.js for dynamic token limits into subtasks such as: (1) Import and integrate the token counting utility, (2) Refactor _unifiedServiceRunner to calculate and enforce dynamic token limits, (3) Update error handling for token limit violations, (4) Add and verify logging for token usage, (5) Write and execute tests for various prompt and model scenarios.",
			"reasoning": "This task involves significant code changes to a core function, integration of a new utility, dynamic logic for multiple models, and robust error handling. It also requires comprehensive testing for edge cases and integration, making it moderately complex and best managed by splitting into focused subtasks."
		},
		{
			"taskId": 87,
			"taskTitle": "Implement validation and error handling",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Decompose this task into: (1) Add validation logic for model and config loading, (2) Implement error handling and fallback mechanisms, (3) Enhance logging and reporting for token usage, (4) Develop helper functions for configuration suggestions and improvements.",
			"reasoning": "This task is primarily about adding validation, error handling, and logging. While important for robustness, the logic is straightforward and can be modularized into a few clear subtasks."
		},
		{
			"taskId": 90,
			"taskTitle": "Implement Subtask Progress Analyzer and Reporting System",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Break down the analyzer implementation into: (1) Design and implement progress tracking logic, (2) Develop status validation and issue detection, (3) Build the reporting system with multiple output formats, (4) Integrate analyzer with the existing task management system, (5) Optimize for performance and scalability, (6) Write unit, integration, and performance tests.",
			"reasoning": "This is a complex, multi-faceted feature involving data analysis, reporting, integration, and performance optimization. It touches many parts of the system and requires careful design, making it one of the most complex tasks in the list."
		},
		{
			"taskId": 91,
			"taskTitle": "Implement Move Command for Tasks and Subtasks",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Expand this task into: (1) Implement move logic for tasks and subtasks, (2) Handle edge cases (invalid ids, non-existent parents, circular dependencies), (3) Update CLI to support move command with flags, (4) Ensure data integrity and update relationships, (5) Write and execute tests for various move scenarios.",
			"reasoning": "Moving tasks and subtasks requires careful handling of hierarchical data, edge cases, and data integrity. The command must be robust and user-friendly, necessitating multiple focused subtasks for safe implementation."
		},
		{
			"taskId": 92,
			"taskTitle": "Add Global Joke Flag to All CLI Commands",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "Break down the implementation of the global --joke flag into the following subtasks: (1) Update CLI foundation to support global flags, (2) Develop the joke-service module with joke management and category support, (3) Integrate joke output into existing output utilities, (4) Update all CLI commands for joke flag compatibility, (5) Add configuration options for joke categories and custom jokes, (6) Implement comprehensive testing (flag recognition, output, content, integration, performance, regression), (7) Update documentation and usage examples.",
			"reasoning": "This task requires changes across the CLI foundation, output utilities, all command modules, and configuration management. It introduces a new service module, global flag handling, and output logic that must not interfere with existing features (including JSON output). The need for robust testing and backward compatibility further increases complexity. The scope spans multiple code areas and requires careful integration, justifying a high complexity score and a detailed subtask breakdown to manage risk and ensure maintainability.[2][3][5]"
		},
		{
			"taskId": 94,
			"taskTitle": "Implement Standalone 'research' CLI Command for AI-Powered Queries",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Break down the implementation of the 'research' CLI command into logical subtasks covering command registration, parameter handling, context gathering, AI service integration, output formatting, and documentation.",
			"reasoning": "This task has moderate to high complexity (7/10) due to multiple interconnected components: CLI argument parsing, integration with AI services, context gathering from various sources, and output formatting with different modes. The cyclomatic complexity would be significant with multiple decision paths for handling different flags and options. The task requires understanding existing patterns and extending the codebase in a consistent manner, suggesting the need for careful decomposition into manageable subtasks."
		},
		{
			"taskId": 86,
			"taskTitle": "Implement GitHub Issue Export Feature",
			"complexityScore": 9,
			"recommendedSubtasks": 10,
			"expansionPrompt": "Break down the implementation of the GitHub Issue Export Feature into detailed subtasks covering: command structure and CLI integration, GitHub API client development, authentication and error handling, task-to-issue mapping logic, content formatting and markdown conversion, bidirectional linking and metadata management, extensible architecture and adapter interfaces, configuration and settings management, documentation, and comprehensive testing (unit, integration, edge cases, performance).",
			"reasoning": "This task involves designing and implementing a robust, extensible export system with deep integration into GitHub, including bidirectional workflows, complex data mapping, error handling, and support for future platforms. The requirements span CLI design, API integration, content transformation, metadata management, extensibility, configuration, and extensive testing. The breadth and depth of these requirements, along with the need for maintainability and future extensibility, place this task at a high complexity level. Breaking it into at least 10 subtasks will ensure each major component and concern is addressed systematically, reducing risk and improving quality."
		},
		{
			"taskId": 24,
			"taskTitle": "Implement AI-Powered Test Generation Command",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Break down the implementation of an AI-powered test generation command into subtasks covering CLI integration, AI prompt construction, API integration, test file formatting, error handling, documentation, framework configuration, and end-to-end testing.",
			"reasoning": "This task requires deep integration with AI services, dynamic prompt engineering, file system operations, error handling, and support for multiple testing frameworks. It also involves CLI, MCP, and configuration changes, making it highly complex and cross-cutting."
		},
		{
			"taskId": 26,
			"taskTitle": "Implement Context Foundation for AI Operations",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Expand the context foundation implementation into subtasks for CLI flag integration, file/rule extraction utilities, prompt construction, error handling, documentation, and comprehensive testing.",
			"reasoning": "While the core logic is straightforward, the need for robust error handling, integration across multiple commands, and user experience considerations increases the complexity."
		},
		{
			"taskId": 27,
			"taskTitle": "Implement Context Enhancements for AI Operations",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "Decompose context enhancements into subtasks for code context extraction, task history integration, PRD context support, context formatting, token management, performance optimization, and advanced testing.",
			"reasoning": "This phase introduces advanced context extraction, intelligent parsing, and integration with multiple context sources, requiring careful design and testing."
		},
		{
			"taskId": 28,
			"taskTitle": "Implement Advanced ContextManager System",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Expand the ContextManager system into subtasks for class design, optimization algorithms, unified CLI interface, AI service integration, caching, performance monitoring, logging, and regression testing.",
			"reasoning": "This task requires architectural design, optimization, cross-cutting integration, and performance monitoring, making it highly complex and foundational."
		},
		{
			"taskId": 40,
			"taskTitle": "Implement 'plan' Command for Task Implementation Planning",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Break down the 'plan' command into subtasks for CLI integration, task/subtask retrieval, AI prompt and response handling, XML formatting, error handling, and user feedback.",
			"reasoning": "The task is moderately complex due to AI integration, XML formatting, and the need to handle both tasks and subtasks, but follows established patterns."
		},
		{
			"taskId": 41,
			"taskTitle": "Implement Visual Task Dependency Graph in Terminal",
			"complexityScore": 8,
			"recommendedSubtasks": 10,
			"expansionPrompt": "Expand the visual dependency graph feature into subtasks for CLI command setup, graph layout algorithms, rendering engine, color coding, cycle detection, filtering/search, accessibility, performance optimization, documentation, and automated testing.",
			"reasoning": "This task involves algorithmic graph layout, terminal rendering, accessibility, and performance optimization, requiring significant design and testing effort."
		},
		{
			"taskId": 42,
			"taskTitle": "Implement MCP-to-MCP Communication Protocol",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Decompose the MCP-to-MCP protocol into subtasks for protocol definition, adapter implementation, client module, reference integration, mode switching, core module updates, documentation, and terminology updates.",
			"reasoning": "Designing a robust, extensible protocol with dynamic mode switching and integration across local and remote systems is highly complex and foundational."
		},
		{
			"taskId": 44,
			"taskTitle": "Implement Task Automation with Webhooks and Event Triggers",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "Expand webhook automation into subtasks for API endpoint design, authentication/security, trigger interface, event processing, delivery/retry logic, error/logging, and testing tools.",
			"reasoning": "This task requires secure, reliable event-driven architecture, integration with external systems, and robust error handling, making it complex."
		},
		{
			"taskId": 45,
			"taskTitle": "Implement GitHub Issue Import Feature",
			"complexityScore": 9,
			"recommendedSubtasks": 15,
			"expansionPrompt": "Break down the GitHub import feature into subtasks for API integration, URL parsing, data fetching, formatting, UI/UX, metadata management, bidirectional linking, extensible architecture, LLM integration, and comprehensive testing.",
			"reasoning": "This feature involves multi-source data integration, LLM-powered analysis, extensibility, and bidirectional workflows, requiring significant engineering and testing."
		},
		{
			"taskId": 46,
			"taskTitle": "Implement ICE Analysis Command for Task Prioritization",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Expand ICE analysis into subtasks for scoring algorithm design, AI integration, report generation, CLI rendering, and complexity report integration.",
			"reasoning": "The task involves AI-driven analysis, report generation, and CLI integration, but follows established analysis/reporting patterns."
		},
		{
			"taskId": 47,
			"taskTitle": "Enhance Task Suggestion Actions Card Workflow",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Decompose the suggestion actions workflow into subtasks for UI design, state management, context addition, task management controls, backend integration, and user experience testing.",
			"reasoning": "This task requires UI/UX redesign, state management, and integration with existing systems, making it moderately complex."
		},
		{
			"taskId": 48,
			"taskTitle": "Refactor Prompts into Centralized Structure",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down prompt refactoring into subtasks for directory structure creation, prompt extraction, and function update/integration.",
			"reasoning": "This is a classic refactor with limited technical risk, but requires careful migration and testing to avoid regressions."
		},
		{
			"taskId": 49,
			"taskTitle": "Implement Code Quality Analysis Command",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Expand code quality analysis into subtasks for pattern recognition, best practice verification, AI integration, recommendation generation, task creation, and reporting interface.",
			"reasoning": "This task involves static analysis, AI integration, and actionable output, requiring both algorithmic and integration work."
		},
		{
			"taskId": 50,
			"taskTitle": "Implement Test Coverage Tracking System by Task",
			"complexityScore": 8,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Decompose test coverage tracking into subtasks for data structure design, coverage parsing, tracking/updating, CLI commands, and AI-powered test generation.",
			"reasoning": "Mapping code coverage to tasks and integrating with LLMs for test generation is complex and requires careful data modeling and tool integration."
		},
		{
			"taskId": 51,
			"taskTitle": "Implement Interactive 'Explore' Command REPL",
			"complexityScore": 7,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Expand the explore REPL into subtasks for context extraction, CLI/REPL interface, results formatting, session management, project context generation, command system, AI integration, and comprehensive testing.",
			"reasoning": "Building an interactive REPL with context management, AI integration, and session persistence is moderately complex and requires robust CLI/UX design."
		},
		{
			"taskId": 52,
			"taskTitle": "Implement Task Suggestion Command for CLI",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Break down the suggest-task command into subtasks for data collection, AI integration, CLI interface, suggestion selection, and configuration/flag handling.",
			"reasoning": "This task is moderately complex due to AI integration and interactive CLI, but follows established suggestion/creation patterns."
		},
		{
			"taskId": 53,
			"taskTitle": "Implement Subtask Suggestion Feature for Parent Tasks",
			"complexityScore": 6,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Expand subtask suggestion into subtasks for parent validation, context gathering, AI suggestion logic, CLI interface, subtask linking, and comprehensive testing.",
			"reasoning": "The task involves AI-powered suggestion, context gathering, and interactive CLI, but is focused in scope."
		},
		{
			"taskId": 55,
			"taskTitle": "Implement Positional Arguments Support for CLI Commands",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Decompose positional argument support into subtasks for CLI parser analysis, argument specification design, core parsing logic, edge case handling, and documentation updates.",
			"reasoning": "This task requires careful CLI parser modification, backward compatibility, and comprehensive testing across all commands."
		},
		{
			"taskId": 57,
			"taskTitle": "Enhance Task-Master CLI User Experience and Interface",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Expand CLI UX enhancements into subtasks for log management, color scheme design, progress indicators, interactive menus, output formatting, and help/documentation system.",
			"reasoning": "Improving CLI UX involves multiple cross-cutting concerns, including logging, formatting, interactivity, and accessibility."
		},
		{
			"taskId": 60,
			"taskTitle": "Implement Mentor System with Round-Table Discussion Feature",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "Break down the mentor system into subtasks for architecture design, profile management, round-table framework, LLM integration, output formatting, task integration, and testing/optimization.",
			"reasoning": "This task requires new data models, simulated personalities, AI-driven discussion, and integration with task management, making it complex and novel."
		},
		{
			"taskId": 62,
			"taskTitle": "Add --simple Flag to Update Commands for Direct Text Input",
			"complexityScore": 4,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Expand the --simple flag implementation into subtasks for parser updates, conditional logic, timestamp formatting, visual indicators, storage, help documentation, integration testing, and final validation.",
			"reasoning": "This is a targeted feature addition with clear requirements and limited scope, but requires careful integration and testing across update flows."
		},
		{
			"taskId": 67,
			"taskTitle": "Add CLI JSON output and Cursor keybindings integration",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Break down this task into subtasks for core JSON output logic, schema consistency, keybindings command structure, file handling/backup, and keybinding customization/installation.",
			"reasoning": "This task involves CLI output refactoring and OS-specific file operations, requiring careful testing and user experience considerations."
		},
		{
			"taskId": 70,
			"taskTitle": "Implement 'diagram' command for Mermaid diagram generation",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Expand the diagram command into subtasks for CLI interface design, Mermaid generation logic, output handling, and documentation/examples.",
			"reasoning": "This task is moderately complex due to diagram generation and CLI integration, but leverages existing libraries and patterns."
		},
		{
			"taskId": 72,
			"taskTitle": "Implement PDF Generation for Project Progress and Dependency Overview",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Decompose PDF generation into subtasks for library selection, template/layout design, data collection, diagram integration, PDF core logic, and CLI/export interface.",
			"reasoning": "Generating PDFs with embedded diagrams and dynamic content requires integration of multiple libraries and careful formatting."
		},
		{
			"taskId": 75,
			"taskTitle": "Integrate Google Search Grounding for Research Role",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Expand Google Search Grounding integration into subtasks for AI service layer modification, conditional logic implementation, model configuration update, and end-to-end testing.",
			"reasoning": "This task is focused on conditional logic and configuration, but requires careful integration and testing to avoid regressions."
		},
		{
			"taskId": 76,
			"taskTitle": "Develop E2E Test Framework for Taskmaster MCP Server (FastMCP over stdio)",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "Break down E2E test framework development into subtasks for architecture design, server launcher, protocol handler, request/response correlation, assertion utilities, test case implementation, and CI integration/documentation.",
			"reasoning": "Building a robust E2E test framework for protocol-level testing is complex and foundational for system reliability."
		},
		{
			"taskId": 89,
			"taskTitle": "Introduce Prioritize Command with Enhanced Priority Levels",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Expand the prioritize command into subtasks for CLI command implementation, priority level logic, CLI output updates, and help/documentation.",
			"reasoning": "This is a focused CLI enhancement with some logic and output changes, but limited architectural impact."
		},
		{
			"taskId": 96,
			"taskTitle": "Create Export Command for On-Demand Task File and PDF Generation",
			"complexityScore": 7,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Decompose export command implementation into subtasks for removing automatic generation, CLI/export infrastructure, PDF export logic, and documentation/testing.",
			"reasoning": "This task involves workflow refactoring, PDF generation, and CLI integration, requiring careful migration and testing."
		},
		{
			"taskId": 97,
			"taskTitle": "Implement Git Workflow Integration",
			"complexityScore": 9,
			"recommendedSubtasks": 10,
			"expansionPrompt": "Expand git workflow integration into subtasks for git operations wrapper, branch management, commit analyzer, PR generator, workflow state management, CLI integration, MCP tools, configuration, documentation, and comprehensive testing.",
			"reasoning": "Automating git workflows with deep task integration, PR/commit generation, and MCP support is highly complex and cross-cutting."
		},
		{
			"taskId": 99,
			"taskTitle": "Enhance Parse-PRD with Intelligent Task Expansion and Detail Preservation",
			"complexityScore": 9,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Break down PRD enhancement into subtasks for PRD analysis/segmentation, context-preserving task generation, in-flight expansion pipeline, expand-task integration, CLI/MCP parameter updates, and comprehensive testing.",
			"reasoning": "This task requires advanced NLP, context mapping, multi-phase processing, and integration with existing workflows, making it highly complex."
		},
		{
			"taskId": 100,
			"taskTitle": "Implement Dynamic Help Menu Generation from CLI Commands",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Expand dynamic help menu implementation into subtasks for command metadata extraction, categorization logic, help content generation, CLI integration, enhanced features/search, and comprehensive testing/documentation.",
			"reasoning": "Dynamically generating help from CLI definitions requires introspection, formatting, categorization, and robust testing to ensure accuracy and maintainability."
		},
		{
			"taskId": 101,
			"taskTitle": "Implement GitHub Issue Export Feature with Bidirectional Linking",
			"complexityScore": 9,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Decompose GitHub export into subtasks for API export service, content formatter, bidirectional link management, CLI/MCP integration, and comprehensive testing/documentation.",
			"reasoning": "This task involves external API integration, content mapping, bidirectional linking, and robust error handling, making it highly complex and critical for workflow integration."
		},
		{
			"taskId": 102,
			"taskTitle": "Task Master Gateway Integration",
			"complexityScore": 8,
			"recommendedSubtasks": 10,
			"expansionPrompt": "Expand gateway integration into subtasks for foundation setup, test-gen command, TDD workflow, git-flow command, schema enhancements, MCP tools, pattern detection, coverage analysis, test watcher, and fallback mode.",
			"reasoning": "Integrating with premium gateway services for advanced features requires new infrastructure, authentication, and deep integration with existing workflows."
		},
		{
			"taskId": 103,
			"taskTitle": "Implement Tagged Task Lists System for Multi-Context Task Management",
			"complexityScore": 8,
			"recommendedSubtasks": 20,
			"expansionPrompt": "Break down tagged task lists into subtasks for schema design, migration, config/state management, CLI/MCP integration, tag-aware command updates, documentation, external file importing, and comprehensive QA.",
			"reasoning": "This task fundamentally changes data structures, requires migration logic, CLI/MCP updates, and robust backward compatibility, making it highly complex and far-reaching."
		},
		{
			"taskId": 104,
			"taskTitle": "Implement 'scope-up' and 'scope-down' CLI Commands for Dynamic Task Complexity Adjustment",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "Expand scope adjustment commands into subtasks for CLI integration, input validation, context-aware AI prompt construction, batch operation logic, historical versioning, dependency integrity, and MCP tool support.",
			"reasoning": "Dynamically adjusting task complexity with AI, batch support, and milestone awareness requires careful design, prompt engineering, and robust error handling."
		}
	]
}