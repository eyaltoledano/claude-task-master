{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Dependencies and Linear SDK Integration",
        "description": "Add Linear SDK to project dependencies and verify basic API connectivity",
        "details": "Install @linear/sdk package via npm. Create a test script to verify Linear API connectivity using a development API key. Test basic GraphQL queries like fetching current user to ensure the SDK is properly configured and can communicate with Linear's API.",
        "testStrategy": "Create a simple test that instantiates LinearClient with a test API key and makes a basic query. Verify the response is valid and no connection errors occur.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Extend Taskmaster Config Schema for Linear Integration",
        "description": "Define and implement the configuration structure for Linear integration settings",
        "details": "Extend Taskmaster's config.json to include a 'linear' section with fields: teamId, projectId, autoSync, stateMapping, useTaskmasterLabel, useLanguageLabels, useCategoryLabels. Implement config reading/writing utilities that can safely update the JSON structure without corrupting existing settings.",
        "testStrategy": "Test config file creation, reading, and updating. Verify that malformed JSON is handled gracefully and that config changes persist correctly across CLI sessions.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement Environment Variable Loading for API Key",
        "description": "Setup secure API key storage and loading mechanism using environment variables",
        "details": "Ensure Taskmaster loads .env files on startup and can access LINEAR_API_KEY from process.env. Implement validation to check if the API key is present and valid format. Create error handling for missing or invalid API keys with clear user guidance.",
        "testStrategy": "Test with valid and invalid API keys. Verify that missing .env file or missing LINEAR_API_KEY variable produces appropriate error messages without exposing sensitive information.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create Integration Manager and Event Hook System",
        "description": "Implement the plugin architecture foundation for handling integration events",
        "details": "Create an IntegrationManager class that can register integration plugins and emit events like 'taskCreated', 'taskUpdated', 'taskStatusChanged', 'taskRemoved'. Modify Taskmaster's core command handlers to emit these events after successful local operations. Design the system to be extensible for future integrations beyond Linear.",
        "testStrategy": "Create unit tests for the IntegrationManager with mock integrations. Verify events are properly emitted and handled. Test that failed integration handlers don't break the main CLI flow.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design the IntegrationManager class architecture",
            "description": "Create the foundational architecture for the IntegrationManager class that will serve as the central hub for managing plugins and integrations. Define class structure, interfaces, and core methods.",
            "dependencies": [],
            "details": "Design class hierarchy, define plugin interface contracts, establish initialization patterns, create plugin lifecycle management methods, and define configuration schema for plugin settings.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement event emitter system for task lifecycle events",
            "description": "Build a robust event emitter system that can handle task lifecycle events throughout the application. This system will allow plugins to listen to and respond to various task states.",
            "dependencies": [
              1
            ],
            "details": "Implement EventEmitter class with subscription/unsubscription methods, define standard task lifecycle events (created, started, completed, failed), add event filtering and priority handling, and ensure thread-safe event dispatching.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Create plugin registration mechanism",
            "description": "Develop a secure and flexible plugin registration system that allows third-party plugins to register themselves with the IntegrationManager and declare their capabilities.",
            "dependencies": [
              1,
              2
            ],
            "details": "Implement plugin discovery and loading mechanisms, create plugin validation and security checks, establish plugin metadata schema, add dynamic plugin loading/unloading capabilities, and create plugin dependency resolution system.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Modify core commands to emit events",
            "description": "Update existing core command implementations to emit appropriate lifecycle events through the event system, enabling plugins to hook into command execution flows.",
            "dependencies": [
              2
            ],
            "details": "Identify all core commands that need event emission, add event emission calls at key execution points, ensure consistent event data structures across commands, implement event emission for error conditions, and maintain backward compatibility.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Add error isolation for plugin failures",
            "description": "Implement comprehensive error isolation mechanisms to prevent plugin failures from affecting core system functionality or other plugins, ensuring system stability.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Create plugin sandboxing mechanisms, implement try-catch wrappers for plugin execution, add plugin health monitoring and automatic recovery, create error reporting and logging for plugin failures, and establish plugin quarantine procedures for repeated failures.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Linear Integration Module Core Structure",
        "description": "Create the main LinearIntegration class with basic Linear API client initialization",
        "details": "Create LinearIntegration class that implements event handlers for task operations. Initialize Linear client with API key from environment. Implement basic error handling and logging for Linear API calls. Structure the module to be self-contained and pluggable into the Integration Manager.",
        "testStrategy": "Test Linear client initialization with valid/invalid API keys. Verify that the integration can be registered with the Integration Manager and receives events properly.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Basic Task Creation Sync to Linear",
        "description": "Create the core functionality to sync new Taskmaster tasks to Linear issues",
        "details": "Implement the onTaskCreated handler that calls Linear's createIssue mutation. Map Taskmaster task fields (title, description, details, testStrategy) to Linear issue fields. Handle the API response to extract issue ID, identifier, and branch name. Implement error handling for API failures without breaking local task creation.",
        "testStrategy": "Test task creation with various task configurations. Verify Linear issues are created with correct titles and descriptions. Test error scenarios like network failures and invalid team IDs.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Linear ID Storage and File Update Mechanism",
        "description": "Add functionality to store Linear issue IDs back to Taskmaster task data",
        "details": "Extend Taskmaster task schema to include linearIssueId, linearIssueNumber, and branchName fields. Implement safe file writing to update tasks.json with Linear metadata after successful issue creation. Handle file write failures gracefully and ensure data consistency.",
        "testStrategy": "Test that Linear IDs are properly stored and persist across CLI sessions. Verify file integrity is maintained even if write operations are interrupted. Test with concurrent file access scenarios.",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Create Interactive Setup Wizard Command",
        "description": "Implement the sync-setup command for configuring Linear integration",
        "details": "Create an interactive CLI command that prompts users for Linear API key, team selection, and project selection. Use Linear API to fetch and display available teams and projects. Store configuration securely with API key in .env and other settings in config.json. Include validation and error handling for each step.",
        "testStrategy": "Test the complete setup flow with valid credentials. Verify team and project lists are fetched correctly. Test error handling for invalid API keys and network failures during setup.",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create interactive CLI prompts for API key",
            "description": "Implement interactive command-line prompts to collect and validate API key from user input with proper masking and error handling",
            "dependencies": [],
            "details": "Create CLI interface using libraries like inquirer or prompts to securely collect API key input. Include input validation, masking for security, retry logic for invalid keys, and clear instructions for users on where to find their API key.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement team fetching and selection",
            "description": "Build functionality to fetch available teams from API and present interactive selection interface to user",
            "dependencies": [
              1
            ],
            "details": "Use the validated API key to make authenticated requests to fetch user's teams. Present teams in a selectable list format with team names and IDs. Handle cases where user has no teams, single team auto-selection, and API errors gracefully.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Implement project fetching and selection",
            "description": "Create project fetching logic and interactive selection interface based on selected team",
            "dependencies": [
              2
            ],
            "details": "Fetch projects associated with the selected team through API calls. Display projects in an organized, selectable format showing project names, descriptions, and relevant metadata. Include search/filter capabilities for large project lists and handle empty project scenarios.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add configuration validation",
            "description": "Implement comprehensive validation for all collected configuration data and API connectivity",
            "dependencies": [
              3
            ],
            "details": "Validate API key format and permissions, verify team and project selections exist and are accessible, test API connectivity with selected configurations, and provide clear error messages for any validation failures with suggested remediation steps.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Store settings securely",
            "description": "Implement secure storage mechanism for configuration settings with encryption and proper file permissions",
            "dependencies": [
              4
            ],
            "details": "Create secure configuration file storage using appropriate encryption for sensitive data like API keys. Set proper file permissions, implement configuration file structure, and include backup/recovery mechanisms. Support multiple configuration profiles if needed.",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "Add setup completion confirmation",
            "description": "Create final confirmation step showing configured settings and successful setup completion",
            "dependencies": [
              5
            ],
            "details": "Display a summary of all configured settings (with sensitive data masked), confirm successful storage of configuration, provide next steps or usage instructions, and include options to modify settings or complete setup. Add success indicators and clear completion messaging.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 9,
        "title": "Implement Linear Workflow State Mapping",
        "description": "Create system to map Taskmaster statuses to Linear workflow states",
        "details": "Query Linear team's workflow states during setup and create mapping between Taskmaster statuses (pending, in-progress, review, done, cancelled) and Linear state IDs. Store mappings in config and provide fallback handling for missing states. Implement helper functions to retrieve state IDs for status updates.",
        "testStrategy": "Test state mapping with teams that have standard and custom workflow states. Verify that missing states are handled gracefully with appropriate fallbacks or user warnings.",
        "priority": "high",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Task Status Update Sync",
        "description": "Sync Taskmaster task status changes to Linear issue states",
        "details": "Implement onTaskStatusChanged handler that updates Linear issue states when Taskmaster task status changes. Use the state mapping to convert Taskmaster statuses to Linear state IDs. Handle special cases like 'deferred' status and provide appropriate Linear state or label handling.",
        "testStrategy": "Test status changes for all supported Taskmaster statuses. Verify Linear issues move to correct workflow states. Test edge cases like updating non-existent issues or invalid state transitions.",
        "priority": "high",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Subtask Creation and Hierarchy Sync",
        "description": "Add support for syncing Taskmaster subtasks as Linear sub-issues",
        "details": "Implement subtask creation sync using Linear's parentId field to create hierarchical issue relationships. Handle both new subtask creation and conversion of existing tasks to subtasks. Ensure parent-child relationships are properly maintained in Linear when tasks are restructured.",
        "testStrategy": "Test creating subtasks under existing tasks. Verify Linear displays proper parent-child relationships. Test converting existing tasks to subtasks and ensure Linear relationships are updated correctly.",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Detect parent-child relationships in tasks",
            "description": "Implement logic to identify and track hierarchical relationships between tasks, including detection of existing parent-child structures and validation of relationship integrity",
            "dependencies": [],
            "details": "Create algorithms to traverse task structures, identify parent-child links, detect orphaned tasks, and validate relationship consistency. Include methods to query task hierarchy depth and sibling relationships.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement subtask creation with parentId",
            "description": "Develop functionality to create new subtasks with proper parent task references, including validation and automatic hierarchy establishment",
            "dependencies": [
              1
            ],
            "details": "Build subtask creation API that accepts parentId parameter, validates parent task existence, establishes bidirectional relationships, and updates parent task metadata to reflect new child tasks.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Handle task-to-subtask conversions",
            "description": "Create mechanisms to convert existing standalone tasks into subtasks of other tasks, managing the restructuring of task hierarchies",
            "dependencies": [
              1,
              2
            ],
            "details": "Implement conversion logic that reassigns task parentage, updates all affected relationships, preserves task data integrity, and handles cascading updates to dependent tasks and references.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Maintain hierarchy consistency",
            "description": "Establish validation rules and automated checks to ensure task hierarchy remains consistent during all operations, preventing circular dependencies and orphaned tasks",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Create validation functions for circular dependency detection, orphan task prevention, hierarchy depth limits, and automated consistency repair mechanisms. Include transaction rollback capabilities for failed operations.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Test complex nesting scenarios",
            "description": "Develop comprehensive test suite covering deep nesting, bulk operations, edge cases, and performance testing for hierarchical task management",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Create test cases for multi-level nesting (5+ levels deep), bulk task conversions, concurrent hierarchy modifications, error recovery scenarios, and performance benchmarks for large task hierarchies (1000+ tasks).",
            "status": "pending"
          }
        ]
      },
      {
        "id": 12,
        "title": "Implement Task Deletion and Archival Sync",
        "description": "Sync task removal operations to Linear by archiving corresponding issues",
        "details": "Implement onTaskRemoved handler that archives Linear issues when Taskmaster tasks are deleted. Handle both regular task deletion and subtask removal. Ensure archived issues are properly hidden from active Linear views while preserving history.",
        "testStrategy": "Test task deletion for both parent tasks and subtasks. Verify Linear issues are archived and no longer appear in active views. Test error handling when trying to archive non-existent issues.",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Priority Mapping and Sync",
        "description": "Map Taskmaster task priorities to Linear issue priorities",
        "details": "Implement priority mapping from Taskmaster's low/medium/high priority system to Linear's priority field. Handle cases where Linear priority is disabled by using labels as fallback. Include priority in both issue creation and update operations.",
        "testStrategy": "Test priority mapping with Linear teams that have priority enabled and disabled. Verify priorities are correctly set on issue creation and updated when task priorities change.",
        "priority": "medium",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Implement Taskmaster Label Creation and Management",
        "description": "Create and manage the 'Taskmaster' label for identifying synced issues",
        "details": "Implement label creation functionality to automatically create a 'Taskmaster' label in Linear if it doesn't exist. Apply this label to all synced issues for easy identification. Include configuration option to disable label application if users prefer unlabeled issues.",
        "testStrategy": "Test label creation on first sync operation. Verify label is applied to all created issues. Test with teams where label already exists and ensure no duplicates are created.",
        "priority": "medium",
        "dependencies": [
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Language Label Detection and Sync",
        "description": "Add support for programming language labels on Linear issues",
        "details": "Implement language detection from task content or allow manual configuration of project language. Create language-specific labels in Linear with appropriate colors (following GitHub's language color scheme). Apply language labels to issues based on detected or configured language.",
        "testStrategy": "Test language detection from task descriptions containing code snippets or file extensions. Verify language labels are created with correct colors and applied to appropriate issues.",
        "priority": "low",
        "dependencies": [
          14
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement language detection logic",
            "description": "Develop algorithms to automatically detect programming languages in code repositories or files using file extensions, syntax patterns, and content analysis heuristics",
            "dependencies": [],
            "details": "Create detection mechanisms that analyze file extensions (.js, .py, .java, etc.), examine code syntax patterns, and implement fallback heuristics for ambiguous cases. Include support for multiple languages within a single repository.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create language labels with GitHub colors",
            "description": "Design and implement a labeling system that uses GitHub's official color scheme for different programming languages",
            "dependencies": [],
            "details": "Map programming languages to their corresponding GitHub color codes (e.g., JavaScript: #f1e05a, Python: #3572A5, Java: #b07219). Create label templates and styling components that maintain consistency with GitHub's visual standards.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Apply labels based on detection",
            "description": "Integrate the language detection logic with the labeling system to automatically assign appropriate colored labels to detected languages",
            "dependencies": [
              1,
              2
            ],
            "details": "Connect the detection algorithms with the label creation system to automatically tag repositories or files with their detected languages. Implement batch processing for multiple files and handle edge cases where detection confidence is low.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add manual language override option",
            "description": "Implement user interface and functionality allowing manual correction or override of automatically detected language labels",
            "dependencies": [
              3
            ],
            "details": "Create user controls for manually selecting or changing language labels when automatic detection is incorrect. Include options to add custom languages, remove incorrect labels, and save user preferences for future detection improvements.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 16,
        "title": "Implement Category Label System",
        "description": "Create and manage category labels for task types (Feature, Bug, Chore, etc.)",
        "details": "Implement category detection and labeling system with default categories: Feature, Bug, Chore, Documentation, Testing, Research, Optimization. Allow configuration of custom categories and automatic category assignment based on task content or manual specification.",
        "testStrategy": "Test category assignment for different types of tasks. Verify category labels are created in Linear and properly applied. Test custom category configuration and label creation.",
        "priority": "low",
        "dependencies": [
          15
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Define default category set and colors",
            "description": "Establish a comprehensive set of default issue categories with associated color schemes for visual identification in Linear",
            "dependencies": [],
            "details": "Create a predefined list of common issue categories (e.g., Bug, Feature, Enhancement, Documentation, Security, Performance) with corresponding hex color codes. Define category hierarchy and naming conventions. Document category descriptions and usage guidelines.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement category detection/assignment logic",
            "description": "Develop intelligent algorithms to automatically detect and assign appropriate categories to issues based on content analysis",
            "dependencies": [
              1
            ],
            "details": "Build keyword matching, pattern recognition, and machine learning models to analyze issue titles, descriptions, and metadata. Implement confidence scoring system for category assignments. Create fallback mechanisms for ambiguous cases and manual override capabilities.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Create category labels in Linear",
            "description": "Set up the defined category labels within Linear's label management system with proper configuration",
            "dependencies": [
              1
            ],
            "details": "Use Linear API to programmatically create category labels with assigned colors. Configure label properties, permissions, and visibility settings. Establish label naming conventions and organize labels in Linear's interface for easy management.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add custom category configuration",
            "description": "Implement user interface and backend functionality to allow customization of category sets and detection rules",
            "dependencies": [
              2,
              3
            ],
            "details": "Build configuration UI for adding, editing, and removing custom categories. Implement validation for custom category rules and color selections. Create import/export functionality for category configurations and provide API endpoints for programmatic category management.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 17,
        "title": "Implement Branch Name Capture and Storage",
        "description": "Capture Linear's suggested branch names and store them in Taskmaster tasks",
        "details": "Modify issue creation to capture the branchName field from Linear's API response. Store branch names in Taskmaster task data for future use in git workflow automation. Ensure branch names are updated if Linear's branch naming scheme changes.",
        "testStrategy": "Test that branch names are properly captured from Linear API responses. Verify branch names are stored in task data and persist across CLI sessions. Test with different Linear branch naming configurations.",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement Task Dependency Sync to Linear Relations",
        "description": "Sync Taskmaster task dependencies as Linear issue relations",
        "details": "Implement dependency sync using Linear's issue relation system. Create 'blocks' relationships where dependent tasks are blocked by their dependencies. Handle dependency creation after all related issues exist and manage dependency removal when tasks are updated.",
        "testStrategy": "Test dependency creation with various dependency chains. Verify Linear shows proper blocking relationships. Test dependency removal and updates to ensure relations are maintained correctly.",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Map task dependencies to Linear IDs",
            "description": "Create a mapping system that translates internal task dependencies to corresponding Linear issue IDs, maintaining bidirectional lookup capabilities",
            "dependencies": [],
            "details": "Implement a dependency mapping service that can convert between internal task identifiers and Linear issue IDs. This includes creating lookup tables, handling ID resolution, and maintaining consistency between systems.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create relation mutations for blocking relationships",
            "description": "Develop GraphQL mutations to establish blocking relationships between Linear issues based on task dependencies",
            "dependencies": [
              1
            ],
            "details": "Build mutation handlers that can create 'blocks' and 'blocked by' relationships in Linear using their relation API. Include proper error handling and validation for relationship creation.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Handle circular dependency detection",
            "description": "Implement algorithms to detect and prevent circular dependencies before creating relationships in Linear",
            "dependencies": [
              1
            ],
            "details": "Create a dependency graph analyzer that can traverse task relationships to identify circular references. Include validation logic that prevents creation of relationships that would create cycles.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Sync after all issues exist",
            "description": "Implement a synchronization process that ensures all Linear issues are created before establishing dependency relationships",
            "dependencies": [
              2,
              3
            ],
            "details": "Create a two-phase sync process where issues are created first, then relationships are established. Include proper sequencing, error recovery, and status tracking for the sync process.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Update relations on dependency changes",
            "description": "Build a system to detect dependency changes and update corresponding Linear relationships accordingly",
            "dependencies": [
              4
            ],
            "details": "Implement change detection for task dependencies and create update handlers that can modify existing Linear relationships. Include diff calculation and incremental update capabilities.",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "Handle relation removal",
            "description": "Implement functionality to remove Linear relationships when task dependencies are deleted or modified",
            "dependencies": [
              5
            ],
            "details": "Create deletion handlers that can safely remove Linear relationships when dependencies are removed. Include cleanup logic, orphan detection, and proper error handling for failed removals.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 19,
        "title": "Implement Bulk Task Sync for Parse-PRD Operations",
        "description": "Handle syncing of multiple tasks created simultaneously from PRD parsing",
        "details": "Implement efficient bulk sync handling for parse-prd command that creates many tasks at once. Create issues sequentially to avoid rate limiting, then handle dependency relations after all issues exist. Provide progress feedback and error summary for bulk operations.",
        "testStrategy": "Test bulk sync with PRDs that generate 20+ tasks. Verify all issues are created correctly and dependencies are properly linked. Test error handling when some issues fail to create in bulk operations.",
        "priority": "medium",
        "dependencies": [
          18
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Detect bulk operation mode",
            "description": "Implement detection logic to identify when multiple issues need to be created simultaneously and determine the appropriate bulk processing strategy",
            "dependencies": [],
            "details": "Create detection mechanisms to identify bulk operations based on input size, user intent, or configuration flags. Implement threshold-based detection and mode switching logic.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement sequential issue creation with progress",
            "description": "Build sequential processing system that creates issues one by one while providing real-time progress feedback to users",
            "dependencies": [
              1
            ],
            "details": "Develop sequential creation workflow with progress tracking, rate limiting compliance, and user feedback mechanisms. Include progress bars, status updates, and estimated completion times.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Collect all Linear IDs for dependency linking",
            "description": "Implement system to capture and store all created Linear issue IDs during bulk operations for subsequent dependency relationship establishment",
            "dependencies": [
              2
            ],
            "details": "Create ID collection mechanism that tracks all successfully created issues, maintains mapping between original requests and Linear IDs, and prepares data structure for dependency linking.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Handle partial failures gracefully",
            "description": "Develop robust error handling system that manages partial failures during bulk operations without compromising successful creations",
            "dependencies": [
              2,
              3
            ],
            "details": "Implement failure recovery mechanisms, retry logic for failed operations, rollback strategies where appropriate, and comprehensive error reporting that distinguishes between recoverable and permanent failures.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Provide bulk operation summary",
            "description": "Create comprehensive reporting system that provides detailed summary of bulk operation results including successes, failures, and created dependencies",
            "dependencies": [
              3,
              4
            ],
            "details": "Build summary generation that includes success/failure counts, created issue IDs, established dependencies, error details, and actionable next steps for any failed operations.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 20,
        "title": "Implement Manual Sync Commands (sync-pending)",
        "description": "Create commands for manually syncing unsynced tasks and checking sync status",
        "details": "Implement sync-pending command to find and sync tasks without Linear IDs. Create sync-status command to audit sync state and identify discrepancies. Handle retry logic for failed sync operations and provide clear feedback on sync results.",
        "testStrategy": "Test sync-pending with tasks created while offline. Verify sync-status correctly identifies unsynced tasks and status discrepancies. Test retry logic for previously failed sync operations.",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Implement Robust Error Handling and Offline Support",
        "description": "Add comprehensive error handling for network failures and API issues",
        "details": "Implement graceful error handling for all Linear API calls. Ensure local operations always succeed regardless of network status. Add retry logic for transient failures and clear error messages for permanent failures. Implement offline operation support with sync queue.",
        "testStrategy": "Test all operations with network disconnected. Verify appropriate error messages are shown without breaking local functionality. Test retry logic with simulated network failures and API rate limiting.",
        "priority": "high",
        "dependencies": [
          20
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Wrap all API calls with try-catch",
            "description": "Implement comprehensive error handling by wrapping all API calls throughout the application with try-catch blocks to gracefully handle network failures, server errors, and unexpected responses.",
            "dependencies": [],
            "details": "Add try-catch blocks around all fetch calls, axios requests, and other API interactions. Include proper error logging and ensure errors are caught at the appropriate level for handling.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement offline detection",
            "description": "Create a system to detect when the application goes offline or comes back online, providing real-time network status monitoring.",
            "dependencies": [],
            "details": "Use navigator.onLine API and network event listeners to detect connectivity changes. Implement a service that broadcasts network status changes to relevant components.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Create sync queue for offline operations",
            "description": "Design and implement a queue system that stores failed API operations when offline and automatically syncs them when connectivity is restored.",
            "dependencies": [
              1,
              2
            ],
            "details": "Build a persistent queue using localStorage or IndexedDB to store pending operations. Include operation metadata, timestamps, and retry counts. Implement queue processing logic that triggers on network restoration.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add retry logic with exponential backoff",
            "description": "Implement intelligent retry mechanisms with exponential backoff for failed API calls to handle temporary network issues and server overload gracefully.",
            "dependencies": [
              1
            ],
            "details": "Create a retry utility that implements exponential backoff algorithm with configurable max attempts, base delay, and jitter. Integrate with existing API error handling to automatically retry appropriate failures.",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Design clear error messages",
            "description": "Create user-friendly error messages and UI components that clearly communicate different types of errors and provide actionable guidance to users.",
            "dependencies": [
              1,
              2
            ],
            "details": "Design error message templates for different scenarios (network errors, server errors, validation errors). Create error UI components with appropriate styling and user guidance. Implement error message localization support.",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "Ensure local operations never fail",
            "description": "Implement robust local data operations with proper validation, fallbacks, and error recovery to ensure local functionality remains reliable even when network operations fail.",
            "dependencies": [
              3
            ],
            "details": "Add comprehensive validation for local storage operations, implement data integrity checks, create fallback mechanisms for corrupted data, and ensure local state management is resilient to errors.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 22,
        "title": "Implement Rate Limiting and Performance Optimization",
        "description": "Add rate limiting protection and optimize API call performance",
        "details": "Implement rate limiting detection and backoff strategies for Linear API calls. Optimize bulk operations to avoid hitting rate limits. Add progress indicators for long-running sync operations and implement efficient batching where possible.",
        "testStrategy": "Test with rapid task creation to trigger rate limiting. Verify backoff strategies work correctly. Test performance with large numbers of tasks and ensure reasonable response times.",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Detect rate limit responses",
            "description": "Implement detection mechanisms for rate limit responses from APIs including HTTP status codes (429, 503), response headers (X-RateLimit-*, Retry-After), and response body patterns to identify when rate limits are hit",
            "dependencies": [],
            "details": "Create a rate limit detector that monitors HTTP responses for common rate limiting indicators such as 429 Too Many Requests status codes, rate limit headers like X-RateLimit-Remaining, X-RateLimit-Reset, and Retry-After headers. Include parsing of response bodies for rate limit messages and implement logging for rate limit events.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement backoff strategies",
            "description": "Develop exponential backoff, linear backoff, and jittered backoff algorithms to handle rate limit scenarios gracefully with configurable parameters for retry attempts, base delay, and maximum wait times",
            "dependencies": [
              1
            ],
            "details": "Create multiple backoff strategy implementations including exponential backoff with configurable base delay and multiplier, linear backoff with fixed increments, and jittered backoff to prevent thundering herd problems. Include retry logic with maximum attempt limits and respect for Retry-After headers when provided by the API.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add request batching where possible",
            "description": "Implement request batching mechanisms to group multiple API calls into single requests where supported by the API, including batch size optimization and error handling for partial batch failures",
            "dependencies": [
              1
            ],
            "details": "Design a batching system that can group similar API requests into batches based on API capabilities. Include configurable batch sizes, timeout handling for batch requests, and logic to handle partial failures within batches. Implement fallback to individual requests when batching fails.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create progress indicators for long operations",
            "description": "Develop progress tracking and user feedback mechanisms for long-running operations including progress bars, estimated time remaining, and status updates for batch processing and rate-limited operations",
            "dependencies": [
              2,
              3
            ],
            "details": "Build a progress indication system that tracks completion percentage, estimated time remaining, and current operation status. Include visual progress bars for UI applications, console progress indicators for CLI tools, and callback mechanisms for custom progress handling. Integrate with batching and backoff systems to provide accurate progress updates.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 23,
        "title": "Implement Task Field Mapping and Description Formatting",
        "description": "Create comprehensive field mapping between Taskmaster and Linear with proper formatting",
        "details": "Implement proper formatting of Taskmaster fields (description, details, testStrategy) into Linear's Markdown description field. Create clear section headers and formatting for readability. Handle special characters and ensure proper Markdown rendering in Linear.",
        "testStrategy": "Test field mapping with various task content including special characters and long descriptions. Verify Markdown formatting renders correctly in Linear interface. Test edge cases like empty fields and very long content.",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Implement Configuration Validation and Setup Testing",
        "description": "Add validation for Linear configuration and connection testing",
        "details": "Implement comprehensive validation for Linear configuration including API key validation, team access verification, and state mapping validation. Add connection testing during setup and provide clear feedback for configuration issues.",
        "testStrategy": "Test setup with invalid API keys, inaccessible teams, and malformed configurations. Verify validation provides clear error messages and guidance for fixing issues.",
        "priority": "medium",
        "dependencies": [
          23
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create comprehensive config validation rules",
            "description": "Develop a robust validation system for configuration files including schema validation, type checking, required field validation, and format verification for various config parameters",
            "dependencies": [],
            "details": "Implement validation rules for all configuration parameters including data types, required fields, allowed values, format patterns (URLs, emails, etc.), and cross-field dependencies. Create validation schemas using JSON Schema or similar framework to ensure configs are properly structured and contain valid values before processing.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement API key verification",
            "description": "Build secure API key validation system with proper authentication checks, key format validation, and expiration handling",
            "dependencies": [
              1
            ],
            "details": "Create API key verification logic that validates key format, checks against authorized keys database/service, handles key expiration, implements rate limiting, and provides secure error handling without exposing sensitive information. Include support for different key types and scopes.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add team/project access validation",
            "description": "Implement authorization system to validate user permissions for specific teams and projects with role-based access control",
            "dependencies": [
              2
            ],
            "details": "Develop access control validation that checks user permissions against team/project resources, implements role-based access (admin, member, viewer), validates resource ownership, handles team membership verification, and ensures users can only access authorized projects and perform permitted actions.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create helpful error messages and fixes",
            "description": "Design user-friendly error messaging system with actionable suggestions and automated fix recommendations for common validation failures",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Implement comprehensive error handling that provides clear, actionable error messages for validation failures, suggests specific fixes for common issues, includes examples of correct formats, offers automated correction suggestions where possible, and creates a user-friendly error reporting system with proper error codes and documentation links.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 25,
        "title": "Implement CLI User Interface Enhancements",
        "description": "Add user-friendly CLI output, progress indicators, and confirmation messages",
        "details": "Implement colored console output for success/error messages. Add progress indicators for sync operations and clear confirmation messages showing Linear issue identifiers. Ensure output is concise and informative without being overwhelming.",
        "testStrategy": "Test CLI output in various terminal environments. Verify colors and formatting work correctly. Test that progress indicators and confirmations provide appropriate feedback for all operations.",
        "priority": "medium",
        "dependencies": [
          24
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Implement Complexity to Story Points Mapping",
        "description": "Map Taskmaster complexity analysis to Linear story point estimates",
        "details": "Implement mapping from Taskmaster's complexity ratings to Linear's estimate field using Fibonacci sequence (1, 2, 3, 5, 8). Allow configuration of complexity-to-points mapping and handle teams that don't use estimates. Integrate with Taskmaster's existing complexity analysis features.",
        "testStrategy": "Test complexity mapping with various task complexity ratings. Verify story points are set correctly in Linear. Test with teams that have estimates disabled and ensure graceful fallback.",
        "priority": "low",
        "dependencies": [
          25
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Implement Integration Architecture Documentation",
        "description": "Create comprehensive documentation for the integration architecture and plugin system",
        "details": "Document the plugin architecture design, event system, and integration points. Create examples for implementing additional integrations. Document configuration options, troubleshooting guides, and best practices for users and developers.",
        "testStrategy": "Review documentation for completeness and accuracy. Test that examples work correctly. Verify troubleshooting guides address common issues and provide effective solutions.",
        "priority": "medium",
        "dependencies": [
          26
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Document plugin architecture and event system",
            "description": "Create comprehensive documentation covering the plugin architecture design, event system mechanics, plugin lifecycle, and system integration points",
            "dependencies": [],
            "details": "Document the core plugin architecture including plugin loading mechanisms, event-driven communication patterns, hook systems, and how plugins interact with the main application. Include architectural diagrams, event flow charts, and plugin interface specifications.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create integration developer guide",
            "description": "Develop a detailed guide for developers on how to integrate with the system, including API references, SDK usage, and integration patterns",
            "dependencies": [
              1
            ],
            "details": "Create step-by-step integration instructions, API endpoint documentation, authentication methods, data formats, error handling, and common integration scenarios. Include setup procedures and configuration requirements.",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Write user documentation and troubleshooting",
            "description": "Produce end-user documentation including user guides, FAQ sections, and comprehensive troubleshooting resources",
            "dependencies": [
              1
            ],
            "details": "Create user-friendly documentation covering system usage, feature explanations, common workflows, troubleshooting guides, error message explanations, and solutions to frequently encountered issues.",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add code examples and best practices",
            "description": "Compile practical code examples, implementation patterns, and best practice guidelines for developers and users",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Provide working code samples, implementation templates, coding standards, performance optimization tips, security best practices, and real-world usage examples that demonstrate proper system utilization.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 28,
        "title": "Implement Comprehensive Testing Suite",
        "description": "Create unit tests, integration tests, and end-to-end testing for the Linear sync feature",
        "details": "Implement unit tests for all integration components including LinearIntegration class, state mapping, and error handling. Create integration tests using Linear API sandbox or mocks. Develop end-to-end tests covering complete user workflows from setup to task management.",
        "testStrategy": "Achieve high test coverage for all integration code. Test with real Linear API in sandbox environment. Verify all user workflows work correctly from initial setup through daily task management.",
        "priority": "high",
        "dependencies": [
          27
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up test fixtures and utilities",
            "description": "Create reusable test fixtures, mock data generators, and utility functions to support comprehensive testing across all levels",
            "dependencies": [],
            "details": "Establish foundational test infrastructure including mock Linear API responses, sample project data, user fixtures, and common test utilities for database seeding, authentication mocking, and assertion helpers",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create unit tests for core modules",
            "description": "Develop comprehensive unit tests for individual components, services, and utility functions with high code coverage",
            "dependencies": [
              1
            ],
            "details": "Write isolated unit tests for authentication, data processing, API client modules, validation logic, and business rule implementations using Jest/Vitest with proper mocking of external dependencies",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Implement integration tests with mocked Linear API",
            "description": "Build integration tests that verify component interactions while using mocked Linear API responses",
            "dependencies": [
              1,
              2
            ],
            "details": "Create tests that validate end-to-end data flow between frontend and backend components using realistic Linear API mocks, testing error handling, data transformation, and state management",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add end-to-end tests for user workflows",
            "description": "Implement comprehensive E2E tests covering critical user journeys and workflows using browser automation",
            "dependencies": [
              1
            ],
            "details": "Use Playwright or Cypress to test complete user scenarios including login, project creation, issue management, team collaboration, and Linear synchronization workflows in a real browser environment",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Configure CI/CD test running",
            "description": "Set up automated test execution in continuous integration pipeline with proper reporting and failure handling",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Configure GitHub Actions or similar CI/CD platform to run all test suites on pull requests and merges, including parallel test execution, test result reporting, and integration with code coverage tools",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "Achieve coverage targets",
            "description": "Optimize test coverage to meet project standards and identify gaps in test coverage across all modules",
            "dependencies": [
              2,
              3,
              4,
              5
            ],
            "details": "Use coverage tools like Istanbul/NYC to measure and improve code coverage, aiming for 80%+ coverage on critical paths, generate coverage reports, and implement coverage gates in CI/CD pipeline",
            "status": "pending"
          }
        ]
      },
      {
        "id": 29,
        "title": "Implement Security and Data Validation",
        "description": "Add security measures for API key handling and data validation for all inputs",
        "details": "Implement secure API key storage and handling practices. Add input validation for all user inputs and API responses. Ensure sensitive information is never logged or exposed. Implement proper sanitization for task content before sending to Linear API.",
        "testStrategy": "Test that API keys are never exposed in logs or error messages. Verify input validation prevents injection attacks and handles malformed data. Test with various edge cases and malicious inputs.",
        "priority": "high",
        "dependencies": [
          28
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Audit API key handling for security",
            "description": "Conduct comprehensive security audit of API key storage, transmission, and usage patterns to identify vulnerabilities",
            "dependencies": [],
            "details": "Review API key storage mechanisms, encryption at rest, secure transmission protocols, key rotation policies, access controls, and ensure keys are not exposed in client-side code or version control",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement input sanitization",
            "description": "Develop and deploy robust input sanitization mechanisms to clean and filter all incoming data",
            "dependencies": [],
            "details": "Create sanitization functions for different data types, implement HTML encoding, SQL injection prevention, script tag removal, and establish sanitization middleware for all API endpoints",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add validation for all user inputs",
            "description": "Implement comprehensive input validation rules and checks for all user-provided data",
            "dependencies": [
              2
            ],
            "details": "Define validation schemas, implement type checking, length limits, format validation, whitelist allowed characters, add server-side validation for all forms and API inputs, and create validation error handling",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Prevent sensitive data in logs",
            "description": "Review and modify logging practices to ensure sensitive information is not recorded in application logs",
            "dependencies": [
              1
            ],
            "details": "Audit existing log statements, implement data masking for sensitive fields, create secure logging guidelines, configure log levels appropriately, and ensure API keys, passwords, and PII are never logged",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Security test common vulnerabilities",
            "description": "Execute comprehensive security testing to identify and validate protection against common web application vulnerabilities",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Perform OWASP Top 10 vulnerability testing, conduct penetration testing for SQL injection, XSS, CSRF, authentication bypass, privilege escalation, and create automated security test suite",
            "status": "pending"
          }
        ]
      },
      {
        "id": 30,
        "title": "Final Integration Testing and Production Readiness",
        "description": "Conduct final testing, performance validation, and prepare for production deployment",
        "details": "Perform comprehensive end-to-end testing with real Linear workspaces. Validate performance with large task sets and verify all features work correctly together. Create deployment documentation, user guides, and ensure the integration is ready for production use.",
        "testStrategy": "Test complete user journeys from setup through daily usage. Verify performance meets requirements with realistic data volumes. Conduct user acceptance testing and address any final issues before release.",
        "priority": "high",
        "dependencies": [
          29
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Conduct full integration testing",
            "description": "Execute comprehensive integration tests to verify all system components work together correctly, including API endpoints, database connections, third-party services, and inter-module communications",
            "dependencies": [],
            "details": "Test all integration points, verify data flow between components, validate error handling across modules, check authentication and authorization flows, and ensure proper logging and monitoring integration",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Performance test with large datasets",
            "description": "Conduct thorough performance testing using realistic large-scale datasets to identify bottlenecks, measure response times, and validate system scalability under load",
            "dependencies": [
              1
            ],
            "details": "Create test datasets of various sizes, execute load testing scenarios, measure database query performance, analyze memory usage patterns, test concurrent user scenarios, and document performance benchmarks",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "User acceptance testing",
            "description": "Coordinate and execute user acceptance testing with stakeholders to validate that the system meets business requirements and user expectations",
            "dependencies": [
              1,
              2
            ],
            "details": "Prepare UAT test cases, coordinate with end users and stakeholders, facilitate testing sessions, collect feedback, document acceptance criteria validation, and obtain formal sign-off",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create deployment documentation",
            "description": "Develop comprehensive deployment documentation including installation guides, configuration instructions, troubleshooting procedures, and operational runbooks",
            "dependencies": [
              2
            ],
            "details": "Document system requirements, create step-by-step deployment procedures, write configuration guides, develop troubleshooting documentation, create rollback procedures, and prepare operational maintenance guides",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Final bug fixes and polish",
            "description": "Address all identified issues from testing phases, implement final improvements, and polish the system for production deployment",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Fix bugs identified during integration and performance testing, address UAT feedback, optimize code performance, improve error messages and user experience, conduct final code review, and prepare release notes",
            "status": "pending"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-17T14:52:50.803Z",
      "updated": "2025-06-17T14:52:50.803Z",
      "description": "Tasks for master context"
    }
  }
}