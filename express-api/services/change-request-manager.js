/**
 * 变更请求(CR)管理器
 * 管理项目范围变更请求的创建、跟踪和审批
 */

import fs from 'fs/promises';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { createLogger } from '../utils/logger.js';

const logger = createLogger('change-request-manager');

export class ChangeRequestManager {
  constructor() {
    this.logger = logger;
  }

  /**
   * 创建变更请求
   */
  async createChangeRequest(projectPath, options) {
    try {
      const {
        type, // 'scope_expansion', 'requirement_change', 'task_modification'
        title,
        description,
        reason,
        impact,
        relatedTasks = [],
        relatedRequirements = [],
        priority = 'medium',
        requestedBy = 'system',
        scopeCheckResult = null
      } = options;

      const cr = {
        id: uuidv4(),
        type,
        title,
        description,
        reason,
        impact,
        relatedTasks,
        relatedRequirements,
        priority,
        status: 'pending', // pending, approved, rejected, implemented
        requestedBy,
        requestedAt: new Date().toISOString(),
        scopeCheckResult,
        approvals: [],
        comments: [],
        metadata: {
          autoGenerated: requestedBy === 'system',
          version: '1.0'
        }
      };

      // 保存CR
      const crPath = await this._saveChangeRequest(projectPath, cr);
      
      this.logger.info('Change request created', { 
        crId: cr.id, 
        type: cr.type,
        crPath 
      });

      return {
        success: true,
        data: cr,
        crPath
      };

    } catch (error) {
      this.logger.error('Failed to create change request', { error: error.message });
      throw error;
    }
  }

  /**
   * 为超出范围的任务自动创建CR
   */
  async createAutoChangeRequest(projectPath, task, scopeCheckResult, operation = 'add') {
    const operationMap = {
      add: '添加任务',
      modify: '修改任务',
      delete: '删除任务',
      expand: '扩展任务'
    };

    const title = `${operationMap[operation]}: ${task.title}`;
    const description = `系统检测到任务"${task.title}"超出了PRD定义的范围，自动创建变更请求。`;
    
    const reason = scopeCheckResult.reasoning || '任务超出PRD范围';
    const impact = this._assessImpact(scopeCheckResult, task);

    return await this.createChangeRequest(projectPath, {
      type: 'scope_expansion',
      title,
      description,
      reason,
      impact,
      relatedTasks: [task.id],
      relatedRequirements: scopeCheckResult.suggestedRequirements || [],
      priority: this._mapRiskToPriority(scopeCheckResult.riskLevel),
      requestedBy: 'system',
      scopeCheckResult
    });
  }

  /**
   * 获取所有变更请求
   */
  async getChangeRequests(projectPath, filters = {}) {
    try {
      const crDir = path.join(projectPath, '.taskmaster', 'change-requests');
      
      try {
        const files = await fs.readdir(crDir);
        const crs = [];

        for (const file of files) {
          if (file.endsWith('.json')) {
            const filePath = path.join(crDir, file);
            const content = await fs.readFile(filePath, 'utf8');
            const cr = JSON.parse(content);
            
            // 应用过滤器
            if (this._matchesFilters(cr, filters)) {
              crs.push(cr);
            }
          }
        }

        // 按创建时间排序
        crs.sort((a, b) => new Date(b.requestedAt) - new Date(a.requestedAt));

        return crs;

      } catch (error) {
        if (error.code === 'ENOENT') {
          return []; // 目录不存在，返回空数组
        }
        throw error;
      }

    } catch (error) {
      this.logger.error('Failed to get change requests', { error: error.message });
      throw error;
    }
  }

  /**
   * 获取单个变更请求
   */
  async getChangeRequest(projectPath, crId) {
    try {
      const crPath = path.join(projectPath, '.taskmaster', 'change-requests', `${crId}.json`);
      const content = await fs.readFile(crPath, 'utf8');
      return JSON.parse(content);
    } catch (error) {
      if (error.code === 'ENOENT') {
        return null;
      }
      throw error;
    }
  }

  /**
   * 更新变更请求状态
   */
  async updateChangeRequestStatus(projectPath, crId, status, comment = '', approvedBy = null) {
    try {
      const cr = await this.getChangeRequest(projectPath, crId);
      if (!cr) {
        throw new Error(`Change request ${crId} not found`);
      }

      cr.status = status;
      cr.updatedAt = new Date().toISOString();

      if (comment) {
        cr.comments.push({
          id: uuidv4(),
          text: comment,
          author: approvedBy || 'system',
          createdAt: new Date().toISOString()
        });
      }

      if (status === 'approved' && approvedBy) {
        cr.approvals.push({
          approvedBy,
          approvedAt: new Date().toISOString(),
          comment
        });
      }

      await this._saveChangeRequest(projectPath, cr);

      this.logger.info('Change request status updated', { 
        crId, 
        status, 
        approvedBy 
      });

      return cr;

    } catch (error) {
      this.logger.error('Failed to update change request status', { 
        error: error.message, 
        crId 
      });
      throw error;
    }
  }

  /**
   * 生成变更请求报告
   */
  async generateChangeRequestReport(projectPath) {
    try {
      const crs = await this.getChangeRequests(projectPath);
      
      const report = {
        summary: {
          total: crs.length,
          pending: crs.filter(cr => cr.status === 'pending').length,
          approved: crs.filter(cr => cr.status === 'approved').length,
          rejected: crs.filter(cr => cr.status === 'rejected').length,
          implemented: crs.filter(cr => cr.status === 'implemented').length
        },
        byType: this._groupByType(crs),
        byPriority: this._groupByPriority(crs),
        recentRequests: crs.slice(0, 10),
        trends: this._analyzeTrends(crs),
        generatedAt: new Date().toISOString()
      };

      return report;

    } catch (error) {
      this.logger.error('Failed to generate change request report', { 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * 保存变更请求
   */
  async _saveChangeRequest(projectPath, cr) {
    const crDir = path.join(projectPath, '.taskmaster', 'change-requests');
    await fs.mkdir(crDir, { recursive: true });

    const crPath = path.join(crDir, `${cr.id}.json`);
    await fs.writeFile(crPath, JSON.stringify(cr, null, 2), 'utf8');

    return crPath;
  }

  /**
   * 评估影响
   */
  _assessImpact(scopeCheckResult, task) {
    const impacts = [];

    if (scopeCheckResult.riskLevel === 'high') {
      impacts.push('高风险：可能显著改变项目范围');
    }

    if (scopeCheckResult.confidence < 0.5) {
      impacts.push('不确定性：需要进一步分析');
    }

    if (scopeCheckResult.suggestedRequirements?.length > 0) {
      impacts.push(`可能影响需求：${scopeCheckResult.suggestedRequirements.join(', ')}`);
    }

    return impacts.length > 0 ? impacts.join('; ') : '影响待评估';
  }

  /**
   * 将风险等级映射到优先级
   */
  _mapRiskToPriority(riskLevel) {
    const mapping = {
      low: 'low',
      medium: 'medium',
      high: 'high'
    };
    return mapping[riskLevel] || 'medium';
  }

  /**
   * 检查是否匹配过滤器
   */
  _matchesFilters(cr, filters) {
    if (filters.status && cr.status !== filters.status) return false;
    if (filters.type && cr.type !== filters.type) return false;
    if (filters.priority && cr.priority !== filters.priority) return false;
    if (filters.requestedBy && cr.requestedBy !== filters.requestedBy) return false;
    return true;
  }

  /**
   * 按类型分组
   */
  _groupByType(crs) {
    const groups = {};
    for (const cr of crs) {
      groups[cr.type] = (groups[cr.type] || 0) + 1;
    }
    return groups;
  }

  /**
   * 按优先级分组
   */
  _groupByPriority(crs) {
    const groups = {};
    for (const cr of crs) {
      groups[cr.priority] = (groups[cr.priority] || 0) + 1;
    }
    return groups;
  }

  /**
   * 分析趋势
   */
  _analyzeTrends(crs) {
    // 简单的趋势分析：按月统计
    const trends = {};
    for (const cr of crs) {
      const month = cr.requestedAt.substring(0, 7); // YYYY-MM
      trends[month] = (trends[month] || 0) + 1;
    }
    return trends;
  }
}

export default ChangeRequestManager;
